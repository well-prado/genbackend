{
  "name": "todo-list-service",
  "description": "A backend service for managing a todo list with functionalities to add, list, update, and delete tasks.",
  "version": "0.1.0",
  "nodes": [
    {
      "name": "validate-task-input",
      "type": "validator",
      "code": "/**\n * Generated node: validate-task-input\n * Description: Validates the input data for a task.\n * Type: validator\n * Generated by Generative Backend Builder\n */\n\n// Import necessary modules from nanoservice-ts\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\n// Define the interface for the task data input\ninterface TaskData {\n  title: string;\n  description?: string;\n  dueDate: string;\n  priority: 'low' | 'medium' | 'high';\n}\n\n// Define the ValidateTaskInput class that extends NanoService\nexport class ValidateTaskInput extends NanoService {\n  // Define the handle method which will be called to process the input\n  async handle(context: Context, inputs: { taskData: TaskData }): Promise<NanoServiceResponse> {\n    // Destructure taskData from inputs\n    const { taskData } = inputs;\n\n    // Initialize isValid to true, will be set to false if any validation fails\n    let isValid = true;\n\n    try {\n      // Validate that title is a non-empty string\n      if (typeof taskData.title !== 'string' || taskData.title.trim() === '') {\n        isValid = false;\n        throw new Error('Title is required and must be a non-empty string.');\n      }\n\n      // Validate that dueDate is a valid date string\n      if (isNaN(Date.parse(taskData.dueDate))) {\n        isValid = false;\n        throw new Error('DueDate must be a valid date string.');\n      }\n\n      // Validate that priority is one of the allowed values\n      if (!['low', 'medium', 'high'].includes(taskData.priority)) {\n        isValid = false;\n        throw new Error('Priority must be one of: low, medium, high.');\n      }\n\n      // Additional optional validation for description if needed\n      if (taskData.description && typeof taskData.description !== 'string') {\n        isValid = false;\n        throw new Error('Description must be a string if provided.');\n      }\n\n    } catch (error) {\n      // Log the error for debugging purposes\n      console.error('Validation error:', error.message);\n    }\n\n    // Return the validation result\n    return {\n      outputs: {\n        isValid\n      }\n    };\n  }\n}",
      "filepath": "nodes/validate-task-input.ts"
    },
    {
      "name": "add-task-to-database",
      "type": "database",
      "code": "/**\n * Generated node: add-task-to-database\n * Description: Adds a new task to the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\n// Define the input schema for the node\ninterface TaskData {\n  title: string;\n  description: string;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n}\n\ninterface Inputs {\n  taskData: TaskData;\n}\n\n// Define the output schema for the node\ninterface Outputs {\n  taskId: string;\n}\n\n// Node class definition\nclass AddTaskToDatabase extends NanoService {\n  // Node description\n  static description = 'Adds a new task to the database.';\n\n  // Handle method implementation\n  async handle(context: Context, inputs: Inputs): Promise<NanoServiceResponse<Outputs>> {\n    try {\n      // Validate the input data\n      const { taskData } = inputs;\n      if (!taskData.title || !taskData.description) {\n        throw new Error('Task title and description are required.');\n      }\n\n      // Simulate adding the task to the database\n      // In a real-world scenario, this would involve database operations\n      const taskId = await this.addTaskToDatabase(taskData);\n\n      // Return the response with the new task ID\n      return {\n        outputs: {\n          taskId,\n        },\n      };\n    } catch (error) {\n      // Handle errors and return a meaningful message\n      return {\n        error: error instanceof Error ? error.message : 'An unknown error occurred',\n      };\n    }\n  }\n\n  // Simulated method to add a task to the database\n  private async addTaskToDatabase(taskData: TaskData): Promise<string> {\n    // Simulate a database operation with a delay\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    // Generate a mock task ID\n    const taskId = `task-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Log the operation (in a real-world scenario, this could be a database log)\n    console.log(`Task added to database: ${JSON.stringify(taskData)} with ID: ${taskId}`);\n\n    return taskId;\n  }\n}\n\nexport default AddTaskToDatabase;",
      "filepath": "nodes/add-task-to-database.ts"
    },
    {
      "name": "list-tasks-from-database",
      "type": "database",
      "code": "/**\n * Generated node: list-tasks-from-database\n * Description: Retrieves all tasks from the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, Context, NanoServiceResponse } from 'nanoservice-ts';\nimport { DatabaseClient } from 'your-database-client'; // Replace with actual database client import\n\n// Define the output schema for the node\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ninterface Outputs {\n  tasks: Task[];\n}\n\n// Node class definition\nexport class ListTasksFromDatabase extends NanoService<{}, Outputs> {\n  // Node description\n  description = 'Retrieves all tasks from the database.';\n\n  // Handle method implementation\n  async handle(context: Context, inputs: {}): Promise<NanoServiceResponse<Outputs>> {\n    try {\n      // Initialize the database client\n      const dbClient = new DatabaseClient(); // Ensure this is configured correctly\n\n      // Connect to the database\n      await dbClient.connect();\n\n      // Retrieve all tasks from the database\n      const tasks = await dbClient.query<Task>('SELECT * FROM tasks');\n\n      // Close the database connection\n      await dbClient.disconnect();\n\n      // Return the tasks in the response\n      return {\n        outputs: {\n          tasks: tasks\n        }\n      };\n    } catch (error) {\n      // Log the error for debugging purposes\n      console.error('Error retrieving tasks from the database:', error);\n\n      // Return an error response\n      return {\n        error: 'Failed to retrieve tasks from the database.'\n      };\n    }\n  }\n}",
      "filepath": "nodes/list-tasks-from-database.ts"
    },
    {
      "name": "update-task-in-database",
      "type": "database",
      "code": "/**\n * Generated node: update-task-in-database\n * Description: Updates an existing task in the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\n// Define the inputs schema for the node\ninterface UpdateTaskInputs {\n    taskId: string;\n    taskData: object;\n}\n\n// Define the outputs schema for the node\ninterface UpdateTaskOutputs {\n    success: boolean;\n}\n\n// Node class definition\nclass UpdateTaskInDatabase extends NanoService {\n    // Node description\n    static description = 'Updates an existing task in the database.';\n\n    // Handle method implementation\n    async handle(context: Context, inputs: UpdateTaskInputs): Promise<NanoServiceResponse<UpdateTaskOutputs>> {\n        const { taskId, taskData } = inputs;\n\n        try {\n            // Validate inputs\n            if (!taskId || typeof taskId !== 'string') {\n                throw new Error('Invalid taskId: taskId must be a non-empty string.');\n            }\n\n            if (!taskData || typeof taskData !== 'object') {\n                throw new Error('Invalid taskData: taskData must be a non-null object.');\n            }\n\n            // Simulate database update operation\n            const database = context.state.database; // Assuming the database is accessible via context.state\n            const taskCollection = database.collection('tasks');\n\n            const updateResult = await taskCollection.updateOne({ id: taskId }, { $set: taskData });\n\n            // Check if the update was successful\n            if (updateResult.modifiedCount === 1) {\n                return {\n                    success: true,\n                };\n            } else {\n                return {\n                    success: false,\n                };\n            }\n        } catch (error) {\n            // Log the error and return a failure response\n            context.logger.error(`Failed to update task with ID ${inputs.taskId}: ${error.message}`);\n            return {\n                success: false,\n            };\n        }\n    }\n}\n\nexport default UpdateTaskInDatabase;",
      "filepath": "nodes/update-task-in-database.ts"
    },
    {
      "name": "delete-task-from-database",
      "type": "database",
      "code": "/**\n * Generated node: delete-task-from-database\n * Description: Deletes a task from the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\n// Define the input schema for the node\ninterface DeleteTaskFromDatabaseInputs {\n  taskId: string; // The ID of the task to be deleted\n}\n\n// Define the output schema for the node\ninterface DeleteTaskFromDatabaseOutputs {\n  success: boolean; // Indicates if the deletion was successful\n}\n\n// Node class definition\nexport class DeleteTaskFromDatabase extends NanoService {\n  // Node description\n  description = 'Deletes a task from the database.';\n\n  // The handle method processes the inputs and performs the task deletion\n  async handle(context: Context, inputs: DeleteTaskFromDatabaseInputs): Promise<NanoServiceResponse<DeleteTaskFromDatabaseOutputs>> {\n    const { taskId } = inputs;\n\n    // Validate the input\n    if (!taskId) {\n      throw new Error('Task ID is required');\n    }\n\n    try {\n      // Simulate a database deletion operation\n      const deletionResult = await this.deleteTask(taskId);\n\n      // Return the result of the deletion operation\n      return {\n        success: deletionResult,\n      };\n    } catch (error) {\n      // Log the error for debugging purposes\n      console.error('Error deleting task:', error);\n\n      // Return a failure response\n      return {\n        success: false,\n      };\n    }\n  }\n\n  // Simulated database deletion function\n  private async deleteTask(taskId: string): Promise<boolean> {\n    // In a real-world scenario, this would involve a database operation\n    // Here, we simulate a successful deletion\n    console.log(`Deleting task with ID: ${taskId}`);\n    return true;\n  }\n}",
      "filepath": "nodes/delete-task-from-database.ts"
    }
  ],
  "workflows": [
    {
      "name": "add-task-workflow",
      "description": "Workflow to add a new task.",
      "filepath": "workflows/add-task-workflow.ts",
      "endpoints": [
        {
          "path": "/api/tasks",
          "method": "POST",
          "description": "Adds a new task to the todo list.",
          "parameters": [
            {
              "name": "taskData",
              "in": "body",
              "required": true,
              "type": "object",
              "description": "The task data to be added"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Task successfully added",
              "schema": {
                "type": "object",
                "properties": {
                  "taskId": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "list-tasks-workflow",
      "description": "Workflow to list all tasks.",
      "filepath": "workflows/list-tasks-workflow.ts",
      "endpoints": [
        {
          "path": "/api/tasks",
          "method": "GET",
          "description": "Lists all tasks in the todo list.",
          "parameters": [],
          "responses": [
            {
              "status": 200,
              "description": "List of tasks",
              "schema": {
                "type": "object",
                "properties": {
                  "tasks": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "update-task-workflow",
      "description": "Workflow to update an existing task.",
      "filepath": "workflows/update-task-workflow.ts",
      "endpoints": [
        {
          "path": "/api/tasks/{taskId}",
          "method": "PUT",
          "description": "Updates an existing task in the todo list.",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the task to be updated"
            },
            {
              "name": "taskData",
              "in": "body",
              "required": true,
              "type": "object",
              "description": "The updated task data"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Task successfully updated",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "delete-task-workflow",
      "description": "Workflow to delete a task.",
      "filepath": "workflows/delete-task-workflow.ts",
      "endpoints": [
        {
          "path": "/api/tasks/{taskId}",
          "method": "DELETE",
          "description": "Deletes a task from the todo list.",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the task to be deleted"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Task successfully deleted",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "endpoints": [
    {
      "path": "/api/tasks",
      "method": "POST",
      "description": "Adds a new task to the todo list.",
      "parameters": [
        {
          "name": "taskData",
          "in": "body",
          "required": true,
          "type": "object",
          "description": "The task data to be added"
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "Task successfully added",
          "schema": {
            "type": "object",
            "properties": {
              "taskId": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    {
      "path": "/api/tasks",
      "method": "GET",
      "description": "Lists all tasks in the todo list.",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "List of tasks",
          "schema": {
            "type": "object",
            "properties": {
              "tasks": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      ]
    },
    {
      "path": "/api/tasks/{taskId}",
      "method": "PUT",
      "description": "Updates an existing task in the todo list.",
      "parameters": [
        {
          "name": "taskId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the task to be updated"
        },
        {
          "name": "taskData",
          "in": "body",
          "required": true,
          "type": "object",
          "description": "The updated task data"
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "Task successfully updated",
          "schema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    },
    {
      "path": "/api/tasks/{taskId}",
      "method": "DELETE",
      "description": "Deletes a task from the todo list.",
      "parameters": [
        {
          "name": "taskId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the task to be deleted"
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "Task successfully deleted",
          "schema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  ]
}