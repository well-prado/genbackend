{
  "name": "movie-listing-service",
  "description": "A backend service that provides endpoints for listing movies and adding new movies to the list.",
  "version": "0.1.0",
  "nodes": [
    {
      "name": "fetch-movies",
      "type": "database",
      "code": "/**\n * Generated node: fetch-movies\n * Description: Retrieves a list of movies from the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\n/**\n * Node: fetch-movies\n * Type: database\n * Description: Retrieves a list of movies from the database.\n *\n * Inputs: None\n * Outputs: \n *  - movies: Array of movies with name, description, and release year.\n */\nclass FetchMoviesNode extends NanoService {\n    // Define the output schema for the node\n    static outputs = [{\n        name: \"movies\",\n        type: \"array\",\n        description: \"Array of movies with name, description, and release year.\"\n    }];\n\n    /**\n     * The handle method is called when the node is executed.\n     * It should connect to a database, fetch the movies, and return them.\n     *\n     * @param context The current context of the request, containing state and other information.\n     * @param inputs The inputs to the node, which are empty in this case.\n     * @returns NanoServiceResponse containing the movies array or an error message.\n     */\n    async handle(context: Context, inputs: {}): Promise<NanoServiceResponse> {\n        try {\n            // Simulate a database connection and query (replace with actual database logic)\n            const movies = await this.fetchMoviesFromDatabase();\n\n            // Return the movies in the expected output format\n            return new NanoServiceResponse({\n                movies: movies\n            });\n        } catch (error) {\n            // Handle any errors that occur during database connection or data fetching\n            console.error(\"Failed to fetch movies from database:\", error);\n            return new NanoServiceResponse({\n                error: \"Failed to fetch movies due to an internal error.\"\n            });\n        }\n    }\n\n    /**\n     * Simulates fetching movies from a database.\n     * Replace this method with actual database interaction logic.\n     */\n    private async fetchMoviesFromDatabase(): Promise<Array<{ name: string, description: string, releaseYear: number }>> {\n        // Example data, replace with actual database query results\n        return [\n            { name: \"Inception\", description: \"A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.\", releaseYear: 2010 },\n            { name: \"The Matrix\", description: \"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.\", releaseYear: 1999 },\n            { name: \"Interstellar\", description: \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\", releaseYear: 2014 }\n        ];\n    }\n}\n\nexport default FetchMoviesNode;",
      "filepath": "nodes/fetch-movies.ts"
    },
    {
      "name": "add-movie",
      "type": "database",
      "code": "/**\n * Generated node: add-movie\n * Description: Adds a new movie to the database.\n * Type: database\n * Generated by Generative Backend Builder\n */\n\nimport { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';\n\ninterface AddMovieInputs {\n  name: string;\n  description: string;\n  releaseYear: number;\n}\n\ninterface AddMovieOutputs {\n  success: boolean;\n}\n\n/**\n * add-movie node: Adds a new movie to the database.\n *\n * This node is responsible for adding a new movie record to a database.\n * It expects inputs for the name, description, and release year of the movie.\n * It outputs a boolean indicating whether the addition was successful.\n */\nclass AddMovie extends NanoService<AddMovieInputs, AddMovieOutputs> {\n  /**\n   * Validates the input data for adding a movie.\n   * @param inputs The inputs object containing the movie details.\n   */\n  private validateInputs(inputs: AddMovieInputs): void {\n    if (!inputs.name || !inputs.description || typeof inputs.releaseYear !== 'number') {\n      throw new Error('Invalid input: All fields must be provided and valid.');\n    }\n  }\n\n  /**\n   * Adds a movie to the database.\n   * @param inputs The inputs object containing the movie details.\n   * @returns A promise that resolves to a boolean indicating success.\n   */\n  private async addMovieToDatabase(inputs: AddMovieInputs): Promise<boolean> {\n    // Placeholder for database insertion logic\n    // This should be replaced with actual database interaction code\n    console.log(`Adding movie: ${inputs.name}, ${inputs.description}, ${inputs.releaseYear}`);\n    return true; // Simulate successful database insertion\n  }\n\n  /**\n   * The handle method processes the incoming request to add a movie.\n   * @param context The context object providing state and request information.\n   * @param inputs The inputs object containing the movie details.\n   * @returns A NanoServiceResponse object with the outcome of the operation.\n   */\n  async handle(context: Context, inputs: AddMovieInputs): Promise<NanoServiceResponse<AddMovieOutputs>> {\n    try {\n      this.validateInputs(inputs);\n      const success = await this.addMovieToDatabase(inputs);\n      return this.success({ success });\n    } catch (error) {\n      console.error('Failed to add movie:', error);\n      return this.failure({ message: error.message });\n    }\n  }\n}\n\nexport default AddMovie;",
      "filepath": "nodes/add-movie.ts"
    }
  ],
  "workflows": [
    {
      "name": "list-movies",
      "description": "Workflow to retrieve and return a list of movies.",
      "filepath": "workflows/list-movies.ts",
      "endpoints": [
        {
          "path": "/api/movies",
          "method": "GET",
          "description": "Returns a list of all movies.",
          "parameters": [],
          "responses": [
            {
              "status": 200,
              "description": "Successful response with a list of movies",
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "releaseYear": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "create-movie",
      "description": "Workflow to add a new movie to the database.",
      "filepath": "workflows/create-movie.ts",
      "endpoints": [
        {
          "path": "/api/movies",
          "method": "POST",
          "description": "Adds a new movie to the list.",
          "parameters": [
            {
              "name": "name",
              "in": "body",
              "required": true,
              "type": "string",
              "description": "Name of the movie"
            },
            {
              "name": "description",
              "in": "body",
              "required": true,
              "type": "string",
              "description": "Description of the movie"
            },
            {
              "name": "releaseYear",
              "in": "body",
              "required": true,
              "type": "number",
              "description": "Release year of the movie"
            }
          ],
          "responses": [
            {
              "status": 200,
              "description": "Movie added successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "endpoints": [
    {
      "path": "/api/movies",
      "method": "GET",
      "description": "Returns a list of all movies.",
      "parameters": [],
      "responses": [
        {
          "status": 200,
          "description": "Successful response with a list of movies",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "releaseYear": {
                  "type": "number"
                }
              }
            }
          }
        }
      ]
    },
    {
      "path": "/api/movies",
      "method": "POST",
      "description": "Adds a new movie to the list.",
      "parameters": [
        {
          "name": "name",
          "in": "body",
          "required": true,
          "type": "string",
          "description": "Name of the movie"
        },
        {
          "name": "description",
          "in": "body",
          "required": true,
          "type": "string",
          "description": "Description of the movie"
        },
        {
          "name": "releaseYear",
          "in": "body",
          "required": true,
          "type": "number",
          "description": "Release year of the movie"
        }
      ],
      "responses": [
        {
          "status": 200,
          "description": "Movie added successfully",
          "schema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      ]
    }
  ]
}