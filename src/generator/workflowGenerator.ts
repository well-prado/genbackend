import OpenAI from 'openai';
import type { GeneratedWorkflow, GeneratorConfig, GeneratedEndpoint } from '../types';
import fs from 'fs';
import path from 'path';
import { logger } from '../utils/logger';

/**
 * Generate TypeScript code for a workflow based on its description
 */
export async function generateWorkflowCode(
  workflowInfo: any,
  config: GeneratorConfig
): Promise<GeneratedWorkflow | null> {
  try {
    if (!workflowInfo || !workflowInfo.name || !workflowInfo.endpoints || !Array.isArray(workflowInfo.endpoints)) {
      logger.error('Invalid workflow info provided');
      return null;
    }

    // Initialize OpenAI client
    if (!config.openaiApiKey) {
      logger.error('OpenAI API key is required');
      return null;
    }

    const openai = new OpenAI({
      apiKey: config.openaiApiKey
    });

    // Create a filename for the workflow
    const workflowName = workflowInfo.name.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
    const fileName = `${workflowName}.ts`;
    const filePath = `workflows/${fileName}`;

    // Extract endpoints
    const endpoints: GeneratedEndpoint[] = workflowInfo.endpoints.map((endpoint: any) => ({
      path: endpoint.path,
      method: endpoint.method,
      description: endpoint.description,
      parameters: endpoint.parameters,
      responses: endpoint.responses
    }));

    // Create the system prompt
    const systemPrompt = `You are an expert TypeScript developer specializing in creating workflows for nanoservice-ts.
Your task is to generate the TypeScript code for a workflow based on the following specifications:

Workflow name: ${workflowInfo.name}
Workflow description: ${workflowInfo.description || 'No description provided'}

Nodes to use: ${JSON.stringify(workflowInfo.nodes || [])}

Endpoints: ${JSON.stringify(endpoints)}

A nanoservice-ts workflow is defined using the Workflow function from @nanoservice-ts/helper.
The workflow should:
1. Define a Step object
2. Use the Workflow function to create a workflow with name, version, and description
3. Add a trigger (usually HTTP) with the appropriate method and path
4. Add steps that use the nodes specified
5. Export the step as default

Please generate a complete TypeScript file with imports and workflow definition.
Use best practices for error handling and type safety.

The workflow should be useful in a real-world scenario and include comprehensive comments.`;

    // Log what we're doing
    logger.log(`Generating workflow code for: ${workflowInfo.name}`);

    // Make the API call to OpenAI
    const completion = await openai.chat.completions.create({
      model: config.model || 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        }
      ],
      temperature: 0.3,
      max_tokens: 2500
    });

    const content = completion.choices[0]?.message.content;

    if (!content) {
      logger.error('No content in OpenAI response');
      return null;
    }

    // Extract the code from the response (assuming it might come with markdown)
    const codeMatch = content.match(/```(?:typescript|ts)([\s\S]*?)```/) ||
      content.match(/```([\s\S]*?)```/) ||
      [null, content];

    let code = codeMatch[1] ? codeMatch[1].trim() : content.trim();

    // Add file comment
    code = `/**
 * Generated workflow: ${workflowInfo.name}
 * Description: ${workflowInfo.description || 'No description provided'}
 * Endpoints: ${endpoints.map(e => `${e.method} ${e.path}`).join(', ')}
 * Generated by Generative Backend Builder
 */

${code}`;

    // Return the generated workflow
    return {
      name: workflowInfo.name,
      description: workflowInfo.description || 'No description provided',
      steps: undefined, // This will be populated when the workflow is loaded
      filepath: filePath,
      endpoints
    };
  } catch (error) {
    logger.error('Error in generateWorkflowCode:', error);
    return null;
  }
}

/**
 * Generate a simple CRUD workflow for a resource
 */
export async function generateCrudWorkflow(
  config: GeneratorConfig,
  resourceName: string,
  description: string,
  fields: { name: string; type: string; description: string }[]
): Promise<GeneratedWorkflow | null> {
  const workflowInfo = {
    name: `${resourceName}-crud`,
    description: `CRUD operations for ${resourceName}`,
    nodes: [
      `${resourceName}-validator`,
      `${resourceName}-database`
    ],
    endpoints: [
      {
        path: `/api/${resourceName}`,
        method: 'GET',
        description: `Get all ${resourceName}s`,
        responses: [
          {
            status: 200,
            description: 'Success',
            schema: {
              type: 'array',
              items: {
                type: 'object',
                properties: fields.reduce((acc: any, field) => {
                  acc[field.name] = { type: field.type };
                  return acc;
                }, {})
              }
            }
          }
        ]
      },
      {
        path: `/api/${resourceName}/:id`,
        method: 'GET',
        description: `Get a single ${resourceName} by ID`,
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            type: 'string',
            description: `The ID of the ${resourceName}`
          }
        ],
        responses: [
          {
            status: 200,
            description: 'Success',
            schema: {
              type: 'object',
              properties: fields.reduce((acc: any, field) => {
                acc[field.name] = { type: field.type };
                return acc;
              }, {})
            }
          },
          {
            status: 404,
            description: 'Not found'
          }
        ]
      },
      {
        path: `/api/${resourceName}`,
        method: 'POST',
        description: `Create a new ${resourceName}`,
        parameters: [
          {
            name: 'body',
            in: 'body',
            required: true,
            type: 'object',
            description: `The ${resourceName} data`
          }
        ],
        responses: [
          {
            status: 201,
            description: 'Created',
            schema: {
              type: 'object',
              properties: {
                id: { type: 'string' },
                ...fields.reduce((acc: any, field) => {
                  acc[field.name] = { type: field.type };
                  return acc;
                }, {})
              }
            }
          },
          {
            status: 400,
            description: 'Bad request'
          }
        ]
      },
      {
        path: `/api/${resourceName}/:id`,
        method: 'PUT',
        description: `Update an existing ${resourceName}`,
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            type: 'string',
            description: `The ID of the ${resourceName}`
          },
          {
            name: 'body',
            in: 'body',
            required: true,
            type: 'object',
            description: `The updated ${resourceName} data`
          }
        ],
        responses: [
          {
            status: 200,
            description: 'Success',
            schema: {
              type: 'object',
              properties: {
                id: { type: 'string' },
                ...fields.reduce((acc: any, field) => {
                  acc[field.name] = { type: field.type };
                  return acc;
                }, {})
              }
            }
          },
          {
            status: 404,
            description: 'Not found'
          }
        ]
      },
      {
        path: `/api/${resourceName}/:id`,
        method: 'DELETE',
        description: `Delete a ${resourceName}`,
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            type: 'string',
            description: `The ID of the ${resourceName}`
          }
        ],
        responses: [
          {
            status: 204,
            description: 'No content'
          },
          {
            status: 404,
            description: 'Not found'
          }
        ]
      }
    ]
  };

  return generateWorkflowCode(workflowInfo, config);
} 