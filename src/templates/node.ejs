/** * Generated node: <%= name %> * Description: <%= description %> * Type: <%=
type %> * Generated by Generative Backend Builder */ import { type
INanoServiceResponse, type JsonLikeObject, NanoService, NanoServiceResponse, }
from "@nanoservice-ts/runner"; import { type Context, GlobalError } from
"@nanoservice-ts/shared"; <% if (inputs && inputs.length > 0) { %> type
InputType = { <% inputs.forEach(input => { %> <%= input.name %>: <%= input.type
%>; <% }); %> }; <% } else { %> type InputType = Record<string, any
  >; <% } %> export default class <%= className %> extends NanoService<InputType>
    { constructor() { super(); this.inputSchema = { $schema:
    "http://json-schema.org/draft-04/schema#", type: "object", properties: { <%
    if (inputs && inputs.length > 0) { %> <% inputs.forEach(input => { %> <%=
    input.name %>: { type: "<%= input.type === 'any' ? 'object' : input.type %>"
    }, <% }); %> <% } %> }, <% if (inputs && inputs.length > 0) { %> required:
    [<%= inputs.filter(i => i.required).map(i => `"${i.name}"`).join(', ') %>],
    <% } else { %> required: [], <% } %> }; } async handle(ctx: Context, inputs:
    InputType): Promise<INanoServiceResponse>
      { const response: NanoServiceResponse = new NanoServiceResponse(); try {
      // TODO: Implement the node logic here <% if (type === 'data-processor') {
      %> // Process the input data const processedData = { ...inputs }; //
      Example processing logic response.setSuccess(processedData as
      JsonLikeObject); <% } else if (type === 'validator') { %> // Validate the
      input data const isValid = true; // Replace with actual validation logic
      if (isValid) { response.setSuccess({ valid: true } as JsonLikeObject); }
      else { throw new Error('Validation failed'); } <% } else if (type ===
      'external-api') { %> // Call an external API // Example: const result =
      await fetch('https://api.example.com/data'); response.setSuccess({ result:
      'API call successful' } as JsonLikeObject); <% } else if (type ===
      'database') { %> // Perform database operations // Example: const result =
      await db.collection('items').find({}).toArray(); response.setSuccess({
      result: 'Database operation successful' } as JsonLikeObject); <% } else {
      %> // Implement custom logic for this node response.setSuccess({ result:
      'Operation successful' } as JsonLikeObject); <% } %> } catch (error:
      unknown) { const nodeError = new GlobalError((error as Error).message);
      nodeError.setCode(500); response.setError(nodeError); } return response; }
      }
    </INanoServiceResponse></InputType
  ></string,
>
