/** * Generated workflow: <%= name %> * Description: <%= description %> *
Endpoints: <%= endpoints.map(e => `${e.method} ${e.path}`).join(', ') %> *
Generated by Generative Backend Builder */ import { type Step, Workflow } from
"@nanoservice-ts/helper"; <% if (endpoints && endpoints.length > 0) { %> // Get
the first endpoint for the trigger const firstEndpoint = <%=
JSON.stringify(endpoints[0]) %>; // Define the workflow const step: Step =
Workflow({ name: "<%= name %>", version: "0.1.0", description: "<%= description
%>", }) .addTrigger("http", { method: "<%= endpoints[0].method %>", path: "<%=
endpoints[0].path %>", accept: "application/json", }) <% if (nodes &&
nodes.length > 0) { %> <% nodes.forEach((node, index) => { %> .addStep({ name:
"<%= node %>-step", node: "<%= node %>", type: "module", inputs: { // TODO:
Define inputs for this step }, }) <% }); %> <% } else { %> // No nodes defined
for this workflow <% } %> ; export default step; <% } else { %> // No endpoints
defined for this workflow const step: Step = Workflow({ name: "<%= name %>",
version: "0.1.0", description: "<%= description %>", }) .addTrigger("http", {
method: "GET", path: "/api/<%= name.toLowerCase().replace(/[^a-z0-9]/g, '-')
%>", accept: "application/json", }); export default step; <% } %>
