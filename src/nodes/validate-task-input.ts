/**
 * Generated node: validate-task-input
 * Description: Validates the input data for a task.
 * Type: validator
 * Generated by Generative Backend Builder
 */

// Import necessary modules from nanoservice-ts
import { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';

// Define the interface for the task data input
interface TaskData {
  title: string;
  description?: string;
  dueDate: string;
  priority: 'low' | 'medium' | 'high';
}

// Define the ValidateTaskInput class that extends NanoService
export class ValidateTaskInput extends NanoService {
  // Define the handle method which will be called to process the input
  async handle(context: Context, inputs: { taskData: TaskData }): Promise<NanoServiceResponse> {
    // Destructure taskData from inputs
    const { taskData } = inputs;

    // Initialize isValid to true, will be set to false if any validation fails
    let isValid = true;

    try {
      // Validate that title is a non-empty string
      if (typeof taskData.title !== 'string' || taskData.title.trim() === '') {
        isValid = false;
        throw new Error('Title is required and must be a non-empty string.');
      }

      // Validate that dueDate is a valid date string
      if (isNaN(Date.parse(taskData.dueDate))) {
        isValid = false;
        throw new Error('DueDate must be a valid date string.');
      }

      // Validate that priority is one of the allowed values
      if (!['low', 'medium', 'high'].includes(taskData.priority)) {
        isValid = false;
        throw new Error('Priority must be one of: low, medium, high.');
      }

      // Additional optional validation for description if needed
      if (taskData.description && typeof taskData.description !== 'string') {
        isValid = false;
        throw new Error('Description must be a string if provided.');
      }

    } catch (error) {
      // Log the error for debugging purposes
      console.error('Validation error:', error.message);
    }

    // Return the validation result
    return {
      outputs: {
        isValid
      }
    };
  }
}