/**
 * Example data processor node
 * Description: Processes input data by adding a timestamp and ID
 * Type: data-processor
 * Generated by Generative Backend Builder
 */

import {
  type INanoServiceResponse,
  type JsonLikeObject,
  NanoService,
  NanoServiceResponse,
} from "@nanoservice-ts/runner";
import { type Context, GlobalError } from "@nanoservice-ts/shared";
import { v4 as uuid } from "uuid";

type InputType = {
  data: Record<string, any>;
};

export default class ExampleDataProcessor extends NanoService<InputType> {
  constructor() {
    super();
    this.inputSchema = {
      $schema: "http://json-schema.org/draft-04/schema#",
      type: "object",
      properties: {
        data: { type: "object" },
      },
      required: ["data"],
    };
  }

  async handle(ctx: Context, inputs: InputType): Promise<INanoServiceResponse> {
    const response: NanoServiceResponse = new NanoServiceResponse();

    try {
      // Process the input data
      const processedData = {
        ...inputs.data,
        id: uuid(),
        timestamp: new Date().toISOString(),
        processed: true
      };

      // Return the processed data
      response.setSuccess(processedData as JsonLikeObject);
    } catch (error: unknown) {
      const nodeError = new GlobalError((error as Error).message);
      nodeError.setCode(500);
      response.setError(nodeError);
    }

    return response;
  }
} 