/**
 * Generated node: add-task-to-database
 * Description: Adds a new task to the database.
 * Type: database
 * Generated by Generative Backend Builder
 */

import { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';

// Define the input schema for the node
interface TaskData {
  title: string;
  description: string;
  dueDate?: Date;
  priority?: 'low' | 'medium' | 'high';
}

interface Inputs {
  taskData: TaskData;
}

// Define the output schema for the node
interface Outputs {
  taskId: string;
}

// Node class definition
class AddTaskToDatabase extends NanoService {
  // Node description
  static description = 'Adds a new task to the database.';

  // Handle method implementation
  async handle(context: Context, inputs: Inputs): Promise<NanoServiceResponse<Outputs>> {
    try {
      // Validate the input data
      const { taskData } = inputs;
      if (!taskData.title || !taskData.description) {
        throw new Error('Task title and description are required.');
      }

      // Simulate adding the task to the database
      // In a real-world scenario, this would involve database operations
      const taskId = await this.addTaskToDatabase(taskData);

      // Return the response with the new task ID
      return {
        outputs: {
          taskId,
        },
      };
    } catch (error) {
      // Handle errors and return a meaningful message
      return {
        error: error instanceof Error ? error.message : 'An unknown error occurred',
      };
    }
  }

  // Simulated method to add a task to the database
  private async addTaskToDatabase(taskData: TaskData): Promise<string> {
    // Simulate a database operation with a delay
    await new Promise((resolve) => setTimeout(resolve, 100));

    // Generate a mock task ID
    const taskId = `task-${Math.random().toString(36).substr(2, 9)}`;

    // Log the operation (in a real-world scenario, this could be a database log)
    console.log(`Task added to database: ${JSON.stringify(taskData)} with ID: ${taskId}`);

    return taskId;
  }
}

export default AddTaskToDatabase;