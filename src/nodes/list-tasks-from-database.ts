/**
 * Generated node: list-tasks-from-database
 * Description: Retrieves all tasks from the database.
 * Type: database
 * Generated by Generative Backend Builder
 */

import { NanoService, Context, NanoServiceResponse } from 'nanoservice-ts';
import { DatabaseClient } from 'your-database-client'; // Replace with actual database client import

// Define the output schema for the node
interface Task {
  id: string;
  title: string;
  description: string;
  completed: boolean;
}

interface Outputs {
  tasks: Task[];
}

// Node class definition
export class ListTasksFromDatabase extends NanoService<{}, Outputs> {
  // Node description
  description = 'Retrieves all tasks from the database.';

  // Handle method implementation
  async handle(context: Context, inputs: {}): Promise<NanoServiceResponse<Outputs>> {
    try {
      // Initialize the database client
      const dbClient = new DatabaseClient(); // Ensure this is configured correctly

      // Connect to the database
      await dbClient.connect();

      // Retrieve all tasks from the database
      const tasks = await dbClient.query<Task>('SELECT * FROM tasks');

      // Close the database connection
      await dbClient.disconnect();

      // Return the tasks in the response
      return {
        outputs: {
          tasks: tasks
        }
      };
    } catch (error) {
      // Log the error for debugging purposes
      console.error('Error retrieving tasks from the database:', error);

      // Return an error response
      return {
        error: 'Failed to retrieve tasks from the database.'
      };
    }
  }
}