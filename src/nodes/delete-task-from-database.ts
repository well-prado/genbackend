/**
 * Generated node: delete-task-from-database
 * Description: Deletes a task from the database.
 * Type: database
 * Generated by Generative Backend Builder
 */

import { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';

// Define the input schema for the node
interface DeleteTaskFromDatabaseInputs {
  taskId: string; // The ID of the task to be deleted
}

// Define the output schema for the node
interface DeleteTaskFromDatabaseOutputs {
  success: boolean; // Indicates if the deletion was successful
}

// Node class definition
export class DeleteTaskFromDatabase extends NanoService {
  // Node description
  description = 'Deletes a task from the database.';

  // The handle method processes the inputs and performs the task deletion
  async handle(context: Context, inputs: DeleteTaskFromDatabaseInputs): Promise<NanoServiceResponse<DeleteTaskFromDatabaseOutputs>> {
    const { taskId } = inputs;

    // Validate the input
    if (!taskId) {
      throw new Error('Task ID is required');
    }

    try {
      // Simulate a database deletion operation
      const deletionResult = await this.deleteTask(taskId);

      // Return the result of the deletion operation
      return {
        success: deletionResult,
      };
    } catch (error) {
      // Log the error for debugging purposes
      console.error('Error deleting task:', error);

      // Return a failure response
      return {
        success: false,
      };
    }
  }

  // Simulated database deletion function
  private async deleteTask(taskId: string): Promise<boolean> {
    // In a real-world scenario, this would involve a database operation
    // Here, we simulate a successful deletion
    console.log(`Deleting task with ID: ${taskId}`);
    return true;
  }
}