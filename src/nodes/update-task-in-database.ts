/**
 * Generated node: update-task-in-database
 * Description: Updates an existing task in the database.
 * Type: database
 * Generated by Generative Backend Builder
 */

import { NanoService, NanoServiceResponse, Context } from 'nanoservice-ts';

// Define the inputs schema for the node
interface UpdateTaskInputs {
    taskId: string;
    taskData: object;
}

// Define the outputs schema for the node
interface UpdateTaskOutputs {
    success: boolean;
}

// Node class definition
class UpdateTaskInDatabase extends NanoService {
    // Node description
    static description = 'Updates an existing task in the database.';

    // Handle method implementation
    async handle(context: Context, inputs: UpdateTaskInputs): Promise<NanoServiceResponse<UpdateTaskOutputs>> {
        const { taskId, taskData } = inputs;

        try {
            // Validate inputs
            if (!taskId || typeof taskId !== 'string') {
                throw new Error('Invalid taskId: taskId must be a non-empty string.');
            }

            if (!taskData || typeof taskData !== 'object') {
                throw new Error('Invalid taskData: taskData must be a non-null object.');
            }

            // Simulate database update operation
            const database = context.state.database; // Assuming the database is accessible via context.state
            const taskCollection = database.collection('tasks');

            const updateResult = await taskCollection.updateOne({ id: taskId }, { $set: taskData });

            // Check if the update was successful
            if (updateResult.modifiedCount === 1) {
                return {
                    success: true,
                };
            } else {
                return {
                    success: false,
                };
            }
        } catch (error) {
            // Log the error and return a failure response
            context.logger.error(`Failed to update task with ID ${inputs.taskId}: ${error.message}`);
            return {
                success: false,
            };
        }
    }
}

export default UpdateTaskInDatabase;