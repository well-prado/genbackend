/**
 * Generated node: fetch-movies
 * Description: Retrieves a list of movies from the database.
 * Type: database
 * Generated by Generative Backend Builder
 * 
 * This is a placeholder file that will be replaced with a proper implementation.
 */

import { NanoService, NanoServiceResponse } from '@nanoservice-ts/runner';
import type { Context } from '@nanoservice-ts/shared';
import type JsonLikeObject from '@nanoservice-ts/runner/dist/types/JsonLikeObject';

/**
 * Node: fetch-movies
 * Type: database
 * Description: Retrieves a list of movies from the database.
 *
 * Inputs: None
 * Outputs: 
 *  - movies: Array of movies with name, description, and release year.
 */
class FetchMoviesNode extends NanoService<{}> {
    // Define the output schema for the node
    static outputs = [{
        name: "movies",
        type: "array",
        description: "Array of movies with name, description, and release year."
    }];

    /**
     * The handle method is called when the node is executed.
     * It should connect to a database, fetch the movies, and return them.
     *
     * @param ctx The current context of the request, containing state and other information.
     * @param inputs The inputs to the node, which are empty in this case.
     * @returns NanoServiceResponse containing the movies array or an error message.
     */
    async handle(ctx: Context, inputs: JsonLikeObject): Promise<NanoServiceResponse> {
        const response = new NanoServiceResponse();
        const movies = [
            { name: "Inception", description: "A thief who steals corporate secrets", releaseYear: 2010 },
            { name: "The Matrix", description: "A computer hacker learns about reality", releaseYear: 1999 }
        ];
        response.setSuccess({ movies });
        return response;
    }
}

export default FetchMoviesNode;